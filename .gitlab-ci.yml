stages:
  - Build
  - Test
  - Artifact Links

variables:
  BUILD_WIN: 'y'
  BUILD_WIN_ARM64: 'y'
  BUILD_MAC: 'n'
  BUILD_LINUX: 'n'
  BUILD_LINUX_ARM64: 'n'
  GIT_DEPTH: 5 # Only grab the last 5 commits when cloning
  NEXUS_PATH_ROOT: 'https://nexus.int.windscribe.com/repository/client-desktop/client-desktop'
  NEXUS_PATH_DEPS: '$NEXUS_PATH_ROOT/dependencies/current'
  NEXUS_PATH_BRANCH_UPLOAD: '${NEXUS_PATH_ROOT}/branches/${CI_COMMIT_BRANCH}'
  NEXUS_PATH_TAGGED_UPLOAD: '${NEXUS_PATH_ROOT}/tagged-builds'
  LINUX_SIGNING_PATH: 'client/common/keys/linux'
  LINUX_PUBLIC_KEY_PATH: '$LINUX_SIGNING_PATH/key.pub'
  MAC_PROVISION_PROFILE_PATH : 'backend/mac/provisioning_profile'
  MAC_PROVISION_PROFILE_FILE_PATH: '$MAC_PROVISION_PROFILE_PATH/embedded.provisionprofile'
  ARCH_LINUX_BUILD_PATH: '/home/build/windscribe'
  RHEL_CMAKE_BUILD_PATH: '/home/build/windscribe'
  BUILD_LIBS_FOLDER: 'build-libs'
  VCPKG_ROOT_WINDOWS: 'c:\vcpkg'
  VCPKG_DEFAULT_BINARY_CACHE_WINDOWS: 'c:\vcpkg_cache'

.template_win10_build: &template_win10_build
  tags: [win10qty6]
  before_script:
    - ./tools/vcpkg/install_ci/vcpkg_install.bat %VCPKG_ROOT_WINDOWS% --configure-git
    - python3 -m pip install -r tools/requirements.txt
    # Remove the default Powershell curl alias so referencing 'curl' will call Windows built-in curl.exe
    - Remove-Item alias:curl
    - Set-Alias -Name curl -Value curl.exe
  interruptible: true

.template_win10_sign: &template_win10_sign
  tags: [win10-digicert-sign]
  before_script:
    - python3 -m pip install -r tools/requirements.txt
    # Remove the default Powershell curl alias so referencing 'curl' will call Windows built-in curl.exe
    - Remove-Item alias:curl
    - Set-Alias -Name curl -Value curl.exe
  interruptible: true

.template_mac_build: &template_mac_build
  tags: [macos11qt6]
  before_script:
    - brew install pkg-config
    - export VCPKG_ROOT="${HOME}/vcpkg"
    - ./tools/vcpkg/install_ci/vcpkg_install.sh "${VCPKG_ROOT}" --configure-git
    - python3 -m pip install -r tools/requirements.txt
    - python3 -m pip install dmgbuild
    - python3 -m pip install gcovr
  interruptible: true

.template_aarch64_ubuntu_build: &template_aarch64_ubuntu_build
  image: arm64v8/ubuntu:focal
  before_script:
    # run this blindly until baked into image
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential git curl libpam0g-dev software-properties-common libgl1-mesa-dev fakeroot python3-pip zip unzip
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get -y install wget autoconf libtool
    # install cmake 3.23.x (default for Ubuntu 20.04 is 3.16.3)
    - wget -qO /etc/apt/trusted.gpg.d/kitware-key.asc https://apt.kitware.com/keys/kitware-archive-latest.asc
    - echo "deb https://apt.kitware.com/ubuntu/ focal main" | tee /etc/apt/sources.list.d/kitware.list
    - DEBIAN_FRONTEND=noninteractive apt-get -y update
    - DEBIAN_FRONTEND=noninteractive apt-get -y install cmake
    - DEBIAN_FRONTEND=noninteractive apt-get -y install ninja-build
    # this packages are required for building openvpn
    - DEBIAN_FRONTEND=noninteractive apt-get -y install automake libnl-genl-3-dev libcap-ng-dev libpam-dev
    # Qt 6 dependencies
    - DEBIAN_FRONTEND=noninteractive apt-get -y install libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync0-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor-dev libwayland-dev
    # Only necessary to install golang if we're building the WireGuard package.
    #- wget -q https://go.dev/dl/go1.18.2.linux-amd64.tar.gz
    #- rm -rf /usr/local/go && tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz && export PATH=$PATH:/usr/local/go/bin
    # Can't get >= 0.12 on 20.04, no snap in docker image.  Use the github release for now.
    - wget -q https://github.com/NixOS/patchelf/releases/download/0.18.0/patchelf-0.18.0-aarch64.tar.gz && mkdir -p tools/patchelf && tar -C tools/patchelf -xzf patchelf-0.18.0-aarch64.tar.gz
    - export PATH=`pwd`/tools/patchelf/bin:$PATH
    - python3 -m pip install --user -r tools/requirements.txt
    # hack to fix 777 file permissions, which breaks the dpkg-deb command in the build_all script.
    - chmod -R o-w installer/linux
    # vcpkg settings
    - export VCPKG_ROOT="${HOME}/vcpkg"
    - export VCPKG_FORCE_SYSTEM_BINARIES=1
    - ./tools/vcpkg/install_ci/vcpkg_install.sh "${VCPKG_ROOT}" --configure-git
    - cmake --version
    - ninja --version
  interruptible: true

.template_rhel_build: &template_rhel_build
  # RHEL 8.4 is the minimum build target for Qt 6.5
  # Could not use the RHEL 8.4 ubi Docker images, as they require a subscription license in order to install many of the packages we require below.
  image: fedora:32
  before_script:
    # run this blindly until baked into image
    - dnf -y update
    - dnf group install -y "Development Tools"
    - dnf install -y gcc-c++ patchelf libxkbcommon-devel mesa-libGL-devel mesa-vulkan-devel cmake python3-pip wget rpm-build fakeroot dpkg kernel-headers perl
    # this packages are required for building openvpn
    - dnf install -y autoconf automake libtool libnl3-devel libcap-ng-devel pam-devel
    # Qt 6 dependencies
    - dnf install -y fontconfig-devel freetype-devel libX11-devel libxcb-devel xcb-util-devel xcb-util-image-devel xcb-util-cursor-devel xcb-util-keysyms-devel xcb-util-renderutil-devel libxkbcommon-x11-devel wayland-devel
    - python3 -m pip install --user -r tools/requirements.txt
    - python3 -m pip install --user gcovr
    # install cmake 3.28.x (default for Fedora 29 is 3.14.5)
    - wget -q -N https://cmake.org/files/v3.28/cmake-3.28.3-linux-x86_64.sh -P ${RHEL_CMAKE_BUILD_PATH}
    - chmod u+x ${RHEL_CMAKE_BUILD_PATH}/cmake-3.28.3-linux-x86_64.sh
    - ${RHEL_CMAKE_BUILD_PATH}/cmake-3.28.3-linux-x86_64.sh --skip-license --exclude-subdir --prefix=${RHEL_CMAKE_BUILD_PATH}
    - export PATH=${RHEL_CMAKE_BUILD_PATH}/bin:$PATH
    # hack to fix 777 file permissions, which breaks the dpkg-deb command in the build_all script.
    - chmod -R o-w installer/linux
    # vcpkg settings
    - export VCPKG_ROOT="${HOME}/vcpkg"
    - ./tools/vcpkg/install_ci/vcpkg_install.sh "${VCPKG_ROOT}" --configure-git
  interruptible: true

.download_dependency_openvpn_dco:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o ${BUILD_LIBS_FOLDER}/openvpn_dco.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/openvpn_dco.zip"

.download_dependency_qt:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o ${BUILD_LIBS_FOLDER}/qt.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/qt.zip"

.download_dependency_wintun:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o ${BUILD_LIBS_FOLDER}/wintun.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/wintun.zip"

.download_dependency_wireguard:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o ${BUILD_LIBS_FOLDER}/wireguard.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/wireguard.zip"

.download_dependency_wstunnel:
  script:
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --create-dirs -o ${BUILD_LIBS_FOLDER}/wstunnel.zip "${NEXUS_PATH_DEPS}/${OS_IDENTIFIER}/wstunnel.zip"

.download_dependencies_win:
  script:
    - !reference [.download_dependency_openvpn_dco, script]
    - !reference [.download_dependency_qt, script]
    - !reference [.download_dependency_wintun, script]
    - !reference [.download_dependency_wireguard, script]
    - !reference [.download_dependency_wstunnel, script]

.download_dependencies_posix:
  script:
    - !reference [.download_dependency_qt, script]
    - !reference [.download_dependency_wireguard, script]
    - !reference [.download_dependency_wstunnel, script]

build:win:x64:app:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - !reference [.download_dependencies_win, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-app --ci-mode
    - $Diff = git diff client/gui/translations
    - if ( $Diff.Count -ne 0 ) { echo "You have changed desktop strings which are not in ts files.  Update your ts files by building locally, run the translation script on them, and add them to the commit."; exit 1 }
    - $Diff = git diff installer/common/translations
    - if ( $Diff.Count -ne 0 ) { echo "You have changed installer strings which are not in ts files.  Update your ts files by building locally, run the translation script on them, and add them to the commit."; exit 1 }
    - $Diff = git diff installer/windows/uninstaller/translations
    - if ( $Diff.Count -ne 0 ) { echo "You have changed uninstaller strings which are not in ts files.  Update your ts files by building locally, run the translation script on them, and add them to the commit."; exit 1 }
  artifacts:
    paths:
      - build/
      - temp/
    expire_in: 1 day
  rules:
    - if: $BUILD_WIN == "y" && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

build:win:x64:mr:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - !reference [.download_dependencies_win, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --ci-mode
  rules:
    - if: $BUILD_WIN == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null && $NIGHTLY_TEST_BUILD != "y"

sign:win:app:
  <<: *template_win10_sign
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - if ($BUILD_WIN -eq "y") { tools/build_all --sign-app --ci-mode }
    - if ($BUILD_WIN_ARM64 -eq "y") { tools/build_all --sign-app --arm64 --ci-mode }
  artifacts:
    paths:
      - build/
      - temp/
    expire_in: 1 day
  needs:
    - job: build:win:x64:app
      optional: true
      artifacts: true
    - job: build:win:arm64:app
      optional: true
      artifacts: true
  rules:
    - if: ($BUILD_WIN == "y" || $BUILD_WIN_ARM64 == "y") && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

build:win:x64:installer:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-installer --ci-mode
  artifacts:
    paths:
      - build/
      - temp/
    expire_in: 1 day
  needs:
    - job: sign:win:app
      optional: true
      artifacts: true
  rules:
    - if: $BUILD_WIN == "y" && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

sign:win:installer:
  <<: *template_win10_sign
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - if ($BUILD_WIN -eq "y") { tools/build_all --sign-installer --ci-mode }
    - if ($BUILD_WIN_ARM64 -eq "y") { tools/build_all --sign-installer --arm64 --ci-mode }
  artifacts:
    paths:
      - build/
      - temp/
    expire_in: 1 day
  needs:
    - job: build:win:x64:installer
      optional: true
      artifacts: true
    - job: build:win:arm64:installer
      optional: true
      artifacts: true
  rules:
    - if: ($BUILD_WIN == "y" || $BUILD_WIN_ARM64 == "y") && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

build:win:x64:bootstrap:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-bootstrap --ci-mode
  artifacts:
    paths:
      - build/
      - temp/
    expire_in: 1 day
  needs:
    - job: sign:win:installer
      optional: true
      artifacts: true
  rules:
    - if: $BUILD_WIN == "y" && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

sign:win:bootstrap:
  <<: *template_win10_sign
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py)
    - if ($BUILD_WIN -eq "y") {
      tools/build_all --sign-bootstrap --ci-mode;
      Set-Variable -name OS_IDENTIFIER -value "windows";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.exe "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/Windscribe_$VERSION.exe";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/WindscribeSymbols_$VERSION.zip "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/WindscribeSymbols_$VERSION.zip"
      }
    - if ($BUILD_WIN_ARM64 -eq "y") {
      tools/build_all --sign-bootstrap --arm64 --ci-mode;
      Set-Variable -name OS_IDENTIFIER -value "windows-arm64";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.exe "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/Windscribe_${VERSION}_arm64.exe";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/WindscribeSymbols_$VERSION.zip "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/WindscribeSymbols_${VERSION}_arm64.zip"
      }
  needs:
    - job: build:win:x64:bootstrap
      optional: true
      artifacts: true
    - job: build:win:arm64:bootstrap
      optional: true
      artifacts: true
  rules:
    - if: ($BUILD_WIN == "y" || $BUILD_WIN_ARM64 == "y") && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null && $NIGHTLY_TEST_BUILD != "y"

sign:win:bootstrap:tagged:
  <<: *template_win10_sign
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py);
    - Set-Variable -name TAG -value $($CI_COMMIT_TAG -replace '^v([0-9].*)','$1')
    - if ($BUILD_WIN -eq "y") {
      tools/build_all --sign-bootstrap --ci-mode;
      Set-Variable -name OS_IDENTIFIER -value "windows";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.exe "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/Windscribe_$VERSION.exe";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/WindscribeSymbols_$VERSION.zip "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/WindscribeSymbols_$VERSION.zip"
      }
    - if ($BUILD_WIN_ARM64 -eq "y") {
      tools/build_all --sign-bootstrap --arm64 --ci-mode;
      Set-Variable -name OS_IDENTIFIER -value "windows-arm64";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.exe "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/Windscribe_${VERSION}_arm64.exe";
      curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/WindscribeSymbols_$VERSION.zip "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/WindscribeSymbols_${VERSION}_arm64.zip"
      }
  needs:
    - job: build:win:x64:bootstrap
      optional: true
      artifacts: true
    - job: build:win:arm64:bootstrap
      optional: true
      artifacts: true
  rules:
    - if: ($BUILD_WIN == "y" || $BUILD_WIN_ARM64 == "y") && $CI_COMMIT_TAG != null

build:win:arm64:app:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    # Need the x64 Qt package so we can reference it as the QT_HOST_PATH in build_all.
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - Set-Variable -name OS_IDENTIFIER -value "windows-arm64"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs-arm64"
    - !reference [.download_dependencies_win, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-app --arm64 --ci-mode
  artifacts:
    paths:
      - build-arm64/
      - temp/
    expire_in: 1 day
  rules:
    - if: $BUILD_WIN_ARM64 == "y" && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

build:win:arm64:mr:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    # Need the x64 Qt package so we can reference it as the QT_HOST_PATH in build_all.
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - Set-Variable -name OS_IDENTIFIER -value "windows-arm64"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs-arm64"
    - !reference [.download_dependencies_win, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --arm64 --ci-mode
  rules:
    - if: $BUILD_WIN_ARM64 == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null && $NIGHTLY_TEST_BUILD != "y"

build:win:arm64:installer:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - Set-Variable -name OS_IDENTIFIER -value "windows-arm64"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs-arm64"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-installer --arm64 --ci-mode
  artifacts:
    paths:
      - build-arm64/
      - temp/
    expire_in: 1 day
  needs:
    - job: sign:win:app
      optional: true
      artifacts: true
  rules:
    - if: $BUILD_WIN_ARM64 == "y" && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"

build:win:arm64:bootstrap:
  <<: *template_win10_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows-arm64"
    - Set-Variable -name BUILD_LIBS_FOLDER -value "build-libs-arm64"
    - !reference [.download_dependency_qt, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-bootstrap --arm64 --ci-mode
  artifacts:
    paths:
      - build-arm64/
      - temp/
    expire_in: 1 day
  needs:
    - job: sign:win:installer
      optional: true
      artifacts: true
  rules:
    - if: $BUILD_WIN_ARM64 == "y" && ($CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH != null) && $NIGHTLY_TEST_BUILD != "y"


.build_mac_installer_common:
  script:
    - OS_IDENTIFIER="macos"
    - !reference [.download_dependencies_posix, script]
    - if [ -d ./${BUILD_LIBS_FOLDER}/ ]; then for z in ./${BUILD_LIBS_FOLDER}/*.zip; do unzip -qod ./${BUILD_LIBS_FOLDER} $z; done; fi
    - VAULT_CLIENT_TOKEN=$(curl --cacert tools/cacert.pem --data "{\"role_id\":\"$VAULT_ROLE_ID\",\"secret_id\":\"$VAULT_SECRET_ID\"}"
      $VAULT_ADDR/v1/auth/approle/login | python3 tools/base/vaulthelper.py --get-client-token)
    # get the secrets JSON and put in VAULT_RESPONSE_JSON
    # Note: the single quotes MUST be used here or we'll get a syntax error
    - 'VAULT_RESPONSE_JSON=$(curl --cacert tools/cacert.pem -H "X-Vault-Token: $VAULT_CLIENT_TOKEN" $VAULT_ADDR/v1/kv/cicd/client-desktop)'
    # parse the secrets
    - PROVISION_PROFILE_BASE64=$(echo $VAULT_RESPONSE_JSON | python3 tools/base/vaulthelper.py --get-mac-provision-profile)
    # write the secrets to file -- Nice to have: use secrets without files, no need to cleanup
    # use echo -e to print \n as newlines
    - mkdir -p $MAC_PROVISION_PROFILE_PATH
    - echo -e ${PROVISION_PROFILE_BASE64} | base64 -d > $MAC_PROVISION_PROFILE_FILE_PATH
    - VERSION=$(python3 tools/base/extract.py)

build:mac:installer:
  <<: *template_mac_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    - tools/build_all --ci-mode --sign
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.dmg "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/Windscribe_$VERSION.dmg"
  rules:
    - if: $BUILD_MAC == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null && $NIGHTLY_TEST_BUILD != "y"

# We don't upload artifacts for merge requests
build:mac:installer:mr:
  <<: *template_mac_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    - tools/build_all --ci-mode --sign
  rules:
    - if: $BUILD_MAC == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null && $NIGHTLY_TEST_BUILD != "y"

build:mac:installer:tagged:
  <<: *template_mac_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    # Only tagged builds are notarized
    - tools/build_all --ci-mode --notarize --sign
    - VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)
    - if [[ $CI_COMMIT_TAG =~ ^v[0-9] ]]; then TAG=${CI_COMMIT_TAG:1}; else TAG=${CI_COMMIT_TAG}; fi
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/Windscribe_$VERSION.dmg "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/Windscribe_$VERSION.dmg"
  rules:
    - if: $BUILD_MAC == "y" && $CI_COMMIT_TAG != null

.build_linux_installer_common:
  script:
    - !reference [.download_dependencies_posix, script]
    - if [ -d ./${BUILD_LIBS_FOLDER}/ ]; then for z in ./${BUILD_LIBS_FOLDER}/*.zip; do unzip -qod ./${BUILD_LIBS_FOLDER} $z; done; fi
    # write public key to file
    - mkdir -p ${LINUX_SIGNING_PATH}
    # create the public key from the private key
    - echo -e ${LINUX_SIGNING_KEY} | openssl rsa -in /dev/stdin -pubout > $LINUX_PUBLIC_KEY_PATH
    - export LINUX_SIGNING_KEY_FORMATTED="`echo -e ${LINUX_SIGNING_KEY}`"
    - VERSION=$(python3 tools/base/extract.py)

build:aarch64_ubuntu:installer:
  <<: *template_aarch64_ubuntu_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux-arm64"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --ci-mode --sign
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_arm64.deb "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_arm64.deb"
  timeout: 4 hours
  rules:
    - if: $BUILD_LINUX_ARM64 == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null && $NIGHTLY_TEST_BUILD != "y"
      when: manual
      allow_failure: true

# We don't upload artifacts for merge requests
build:aarch64_ubuntu:installer:mr:
  <<: *template_aarch64_ubuntu_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux-arm64"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --ci-mode --sign
  timeout: 4 hours
  rules:
    - if: $BUILD_LINUX_ARM64 == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null && $NIGHTLY_TEST_BUILD != "y"
      when: manual
      allow_failure: true

build:aarch64_ubuntu:installer:tagged:
  <<: *template_aarch64_ubuntu_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux-arm64"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --ci-mode --sign
    - VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)
    - if [[ $CI_COMMIT_TAG =~ ^v[0-9] ]]; then TAG=${CI_COMMIT_TAG:1}; else TAG=${CI_COMMIT_TAG}; fi
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_arm64.deb "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_arm64.deb"
  timeout: 4 hours
  rules:
    - if: $BUILD_LINUX_ARM64 == "y" && $CI_COMMIT_TAG != null && $NIGHTLY_TEST_BUILD != "y"
      when: manual
      allow_failure: true

build:rhel:installer:
  <<: *template_rhel_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --ci-mode --sign --build-deb --build-rpm
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_x86_64.rpm "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_x86_64.rpm"
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_amd64.deb "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_amd64.deb"

  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null && $NIGHTLY_TEST_BUILD != "y"

# We don't upload artifacts for merge requests
build:rhel:installer:mr:
  <<: *template_rhel_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --ci-mode --sign --build-deb --build-rpm
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == null && $NIGHTLY_TEST_BUILD != "y"

build:rhel:installer:tagged:
  <<: *template_rhel_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --ci-mode --sign --build-deb --build-rpm
    - VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)
    - if [[ $CI_COMMIT_TAG =~ ^v[0-9] ]]; then TAG=${CI_COMMIT_TAG:1}; else TAG=${CI_COMMIT_TAG}; fi
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_x86_64.rpm "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_x86_64.rpm"
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file build-exe/windscribe_${VERSION}_amd64.deb "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_amd64.deb"

  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG != null && $NIGHTLY_TEST_BUILD != "y"

.template_archlinux_build: &template_archlinux_build
  image: archlinux:base-devel
  before_script:
    - pacman -Syu --noconfirm
    - pacman -Sy --noconfirm git curl python nftables c-ares freetype2 hicolor-icon-theme libglvnd fontconfig libx11 libxkbcommon libxcb net-tools xcb-util-wm xcb-util-image xcb-util-keysyms xcb-util-renderutil xcb-util-cursor networkmanager

.build_archlinux_installer_prep_build_dir:
  script:
    # makepkg cannot be run as root.  Set up a build folder and use the nobody user.
    - mkdir -p ${ARCH_LINUX_BUILD_PATH}
    - chgrp nobody ${ARCH_LINUX_BUILD_PATH}
    - chmod g+ws ${ARCH_LINUX_BUILD_PATH}
    - setfacl -m u::rwx,g::rwx ${ARCH_LINUX_BUILD_PATH}
    - setfacl -d --set u::rwx,g::rwx,o::- ${ARCH_LINUX_BUILD_PATH}
    - cp installer/linux/arch_package/* ${ARCH_LINUX_BUILD_PATH}
    - export VERSION=$(python3 tools/base/extract.py)
    - export VERSION_NO_SUFFIX=$(python3 tools/base/extract.py --no-suffix)

.build_archlinux_installer_makepkg:
  script:
    # Convert Ubuntu package referenced by APP_DOWNLOAD_URL to an Arch Linux package.
    - cd ${ARCH_LINUX_BUILD_PATH}
    - sudo --preserve-env --user=nobody makepkg --syncdeps
    - cd -

build:archlinux:installer:
  <<: *template_archlinux_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.build_archlinux_installer_prep_build_dir, script]
    - export APP_DOWNLOAD_URL="${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_amd64.deb"
    - !reference [.build_archlinux_installer_makepkg, script]
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file ${ARCH_LINUX_BUILD_PATH}/windscribe-$VERSION_NO_SUFFIX-1-x86_64.pkg.tar.zst
      "${NEXUS_PATH_BRANCH_UPLOAD}/${OS_IDENTIFIER}/windscribe_${VERSION}_x86_64.pkg.tar.zst"
  needs:
    - job: "build:rhel:installer"
      optional: true
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null && $NIGHTLY_TEST_BUILD != "y"

build:archlinux:installer:tagged:
  <<: *template_archlinux_build
  stage: Build
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_archlinux_installer_prep_build_dir, script]
    - export APP_DOWNLOAD_URL=${NEXUS_PATH_TAGGED_UPLOAD}/$VERSION_NO_SUFFIX/windscribe_${VERSION}_amd64.deb
    - !reference [.build_archlinux_installer_makepkg, script]
    - if [[ $CI_COMMIT_TAG =~ ^v[0-9] ]]; then TAG=${CI_COMMIT_TAG:1}; else TAG=${CI_COMMIT_TAG}; fi
    - curl --silent --show-error --fail -u "${NEXUS_USERNAME}:${NEXUS_PASSWORD}" --cacert tools/cacert.pem
      --upload-file ${ARCH_LINUX_BUILD_PATH}/windscribe-$VERSION_NO_SUFFIX-1-x86_64.pkg.tar.zst
      "${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_x86_64.pkg.tar.zst"
  needs:
    - job: "build:rhel:installer:tagged"
      optional: true
  rules:
    - if: $BUILD_LINUX == "y" && $CI_COMMIT_TAG != null && $NIGHTLY_TEST_BUILD != "y"

build:artifact:links:
  tags: [win10qty6]
  stage: Artifact Links
  script:
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py)
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/windows/Windscribe_$VERSION.exe
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/windows-arm64/Windscribe_${VERSION}_arm64.exe
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/macos/Windscribe_$VERSION.dmg
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/linux/windscribe_${VERSION}_amd64.deb
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/linux/windscribe_${VERSION}_x86_64.rpm
    - echo ${NEXUS_PATH_BRANCH_UPLOAD}/linux/windscribe_${VERSION}_x86_64.pkg.tar.zst
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH != null && $NIGHTLY_TEST_BUILD != "y"

build:artifact:links:tagged:
  tags: [win10qty6]
  stage: Artifact Links
  script:
    - Set-Variable -name VERSION -value $(python3 tools/base/extract.py)
    - Set-Variable -name TAG -value $($CI_COMMIT_TAG -replace '^v([0-9].*)','$1')
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/Windscribe_$VERSION.exe
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/Windscribe_${VERSION}_arm64.exe
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/Windscribe_$VERSION.dmg
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_amd64.deb
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_x86_64.rpm
    - echo ${NEXUS_PATH_TAGGED_UPLOAD}/${TAG}/windscribe_${VERSION}_x86_64.pkg.tar.zst
  dependencies: []
  rules:
    - if: $CI_COMMIT_TAG != null && $NIGHTLY_TEST_BUILD != "y"

lint:flake8:
  <<: *template_win10_build
  stage: Test
  variables:
    GIT_STRATEGY: clone
  script:
    - python3 -m pip install flake8
    - flake8 --ignore=E402,E501 tools
  dependencies: []
  rules:
    - if: $BUILD_WIN == "y"

test:translations:
  <<: *template_win10_build
  stage: Test
  variables:
    GIT_STRATEGY: clone
  script:
    - $Unfinished = Select-String -Path client\gui\translations\*,installer\common\translations\*,installer\windows\uninstaller\translations\* -Pattern 'type="unfinished"'
    - if ( $Unfinished.Matches.Count -ne 0 ) { echo "You have untranslated strings in your ts files.  Run the translation script on the ts files and add them to the commit."; exit 1 }
    - $Vanished = Select-String -Path client\gui\translations\*,installer\common\translations\*,installer\windows\uninstaller\translations\* -Pattern 'type="vanished"'
    - if ( $Vanished.Matches.Count -ne 0 ) { echo "You have vanished strings in your ts files.  Run the translation script on the ts files with --remove-vanished and add them to the commit."; exit 1 }
  dependencies: []
  rules:
    - if: $BUILD_WIN == "y"

test:wsnet:win:
  <<: *template_win10_build
  stage: Test
  variables:
    GIT_STRATEGY: clone
    VCPKG_ROOT: '%VCPKG_ROOT_WINDOWS%'
    VCPKG_DEFAULT_BINARY_CACHE: '%VCPKG_DEFAULT_BINARY_CACHE_WINDOWS%'
  script:
    - Set-Variable -name OS_IDENTIFIER -value "windows"
    - !reference [.download_dependencies_win, script]
    - 'IF(Test-Path .\$BUILD_LIBS_FOLDER\) {Get-ChildItem .\$BUILD_LIBS_FOLDER\*.zip | Foreach {.\tools\bin\7z.exe x $_.FullName -o"$BUILD_LIBS_FOLDER\"}}'
    - tools/build_all --build-app --build-tests
    - cd build/test
    - ./wsnet_test.exe
  rules:
    - if: $BUILD_WIN == "y" && $NIGHTLY_TEST_BUILD == "y"

test:wsnet:mac:
  <<: *template_mac_build
  stage: Test
  variables:
    GIT_STRATEGY: clone
  script:
    - !reference [.build_mac_installer_common, script]
    - tools/build_all --build-app --build-tests
    - build/client/wsnet_test
  after_script:
    - python3 -m gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}-mac
    expire_in: 1 day
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $BUILD_MAC == "y" && $NIGHTLY_TEST_BUILD == "y"

test:wsnet:rhel:
  <<: *template_rhel_build
  stage: Test
  variables:
    GIT_STRATEGY: clone
  script:
    - OS_IDENTIFIER="linux"
    - !reference [.build_linux_installer_common, script]
    - tools/build_all --build-app --build-tests
    - build/client/wsnet_test
  after_script:
    - python3 -m gcovr --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}-linux
    expire_in: 1 day
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  rules:
    - if: $BUILD_LINUX == "y" && $NIGHTLY_TEST_BUILD == "y"

