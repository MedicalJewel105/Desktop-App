diff --git a/lib/vtls/openssl.c b/lib/vtls/openssl.c
index 98fa962ab..77bd3b2ea 100644
--- a/lib/vtls/openssl.c
+++ b/lib/vtls/openssl.c
@@ -82,6 +82,13 @@
 #include <openssl/tls1.h>
 #include <openssl/evp.h>
 
+#ifdef _WIN32 && (OPENSSL_VERSION_NUMBER >= 0x30000000L)
+#include <openssl/crypto.h>
+#include <openssl/provider.h>
+extern OSSL_provider_init_fn oqs_provider_init;
+static const char *kOQSProviderName = "oqsprovider";
+#endif
+
 #ifdef USE_ECH
 # ifndef OPENSSL_IS_BORINGSSL
 #  include <openssl/ech.h>
@@ -3513,6 +3520,36 @@ CURLcode Curl_ssl_setup_x509_store(struct Curl_cfilter *cf,
 }
 #endif /* HAVE_SSL_X509_STORE_SHARE */
 
+#ifdef _WIN32 && (OPENSSL_VERSION_NUMBER >= 0x30000000L)
+static int load_oqs_provider(OSSL_LIB_CTX *libctx)
+{
+    OSSL_PROVIDER *provider;
+    int ret;
+
+    ret = OSSL_PROVIDER_available(libctx, kOQSProviderName);
+    if (ret != 0) {
+        return 0;
+    }
+
+    ret = OSSL_PROVIDER_add_builtin(libctx, kOQSProviderName, oqs_provider_init);
+    if (ret != 1) {
+        return -1;
+    }
+
+    provider = OSSL_PROVIDER_load(libctx, kOQSProviderName);
+    if (provider == NULL) {
+        return -1;
+    }
+
+    ret = OSSL_PROVIDER_available(libctx, kOQSProviderName);
+    if (ret != 1) {
+        return -1;
+    }
+
+    return 0;
+}
+#endif
+
 CURLcode Curl_ossl_ctx_init(struct ossl_ctx *octx,
                             struct Curl_cfilter *cf,
                             struct Curl_easy *data,
@@ -3596,6 +3633,12 @@ CURLcode Curl_ossl_ctx_init(struct ossl_ctx *octx,
     return CURLE_SSL_CONNECT_ERROR;
   }
 
+#ifdef _WIN32 && (OPENSSL_VERSION_NUMBER >= 0x30000000L)
+  // Use statically linked OpenSSL provider for OQS
+  if (load_oqs_provider(OSSL_LIB_CTX_get0_global_default()) != 0) {
+    return 0;
+  }
+#endif
 
   DEBUGASSERT(!octx->ssl_ctx);
   octx->ssl_ctx = SSL_CTX_new(req_method);
